basePath: /
definitions:
  dto.LoginData:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  dto.RequestDto:
    properties:
      inputs:
        type: string
    type: object
  dto.SignUpData:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        minLength: 8
        type: string
      surname:
        type: string
    required:
    - email
    - name
    - password
    - surname
    type: object
  users.Role:
    properties:
      createdAt:
        type: string
      id:
        type: integer
      name:
        type: string
      updatedAt:
        type: string
      users:
        items:
          $ref: '#/definitions/users.User'
        type: array
    type: object
  users.User:
    properties:
      createdAt:
        type: string
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      passWordHash:
        type: string
      roles:
        items:
          $ref: '#/definitions/users.Role'
        type: array
      surname:
        type: string
      updatedAt:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: API documentation for the Orbyters project
  title: Orbyters API Documentation
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Login an existing user and get a JWT token
      parameters:
      - description: User login data
        in: body
        name: loginData
        required: true
        schema:
          $ref: '#/definitions/dto.LoginData'
      produces:
      - application/json
      responses:
        "200":
          description: Login successful, JWT token returned
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid input
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Invalid email or password
          schema:
            additionalProperties:
              type: string
            type: object
      summary: User Login
      tags:
      - Auth
  /auth/me:
    get:
      consumes:
      - application/json
      description: Get the details of the currently authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: User details
          schema:
            $ref: '#/definitions/users.User'
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get details of the logged-in user
      tags:
      - Auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user in the system
      parameters:
      - description: User registration data
        in: body
        name: registration
        required: true
        schema:
          $ref: '#/definitions/dto.SignUpData'
      produces:
      - application/json
      responses:
        "201":
          description: User registered successfully
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid input
          schema:
            additionalProperties:
              type: string
            type: object
      summary: User Registration
      tags:
      - Auth
  /mistral/generate:
    post:
      consumes:
      - application/json
      description: Call the Hugging Face Mistral model with a prompt and return generated
        text
      parameters:
      - description: Request dto
        in: body
        name: requestDto
        required: true
        schema:
          $ref: '#/definitions/dto.RequestDto'
      produces:
      - application/json
      responses:
        "200":
          description: Generated text
          schema:
            type: string
        "400":
          description: Invalid input
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Error calling Mistral API
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Generate text using Mistral AI model
      tags:
      - Chatbot
  /roles:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: Roles
          schema:
            items:
              $ref: '#/definitions/users.Role'
            type: array
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get All existing roles
      tags:
      - Roles
  /user/details:
    get:
      consumes:
      - application/json
      description: Get the details of the currently authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: User details
          schema:
            $ref: '#/definitions/users.User'
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get details of the logged-in user
      tags:
      - Users
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
